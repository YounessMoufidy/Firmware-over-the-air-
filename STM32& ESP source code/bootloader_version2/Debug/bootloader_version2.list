
bootloader_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ac  080024ac  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080024ac  080024ac  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024ac  080024ac  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080024b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000030  080024e0  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080024e0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085e9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eec  00000000  00000000  00028681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000858  00000000  00000000  0002a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000643  00000000  00000000  0002adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017252  00000000  00000000  0002b40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b425  00000000  00000000  0004265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000805bd  00000000  00000000  0004da82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f64  00000000  00000000  000ce040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000cffa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002460 	.word	0x08002460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002460 	.word	0x08002460

0800014c <BL_FeatchHostCommand>:
	va_end(args);
}


BL_status BL_FeatchHostCommand(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	BL_status status=BL_NACK;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_status=HAL_ERROR;
 8000156:	2301      	movs	r3, #1
 8000158:	71bb      	strb	r3, [r7, #6]
	uint8_t data_length=0;
 800015a:	2300      	movs	r3, #0
 800015c:	717b      	strb	r3, [r7, #5]
	memset(HOST_Buffer,0,HOSTM_MAX_SIZE);
 800015e:	22c8      	movs	r2, #200	; 0xc8
 8000160:	2100      	movs	r1, #0
 8000162:	482c      	ldr	r0, [pc, #176]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000164:	f002 f950 	bl	8002408 <memset>
	HAL_status=	HAL_UART_Receive(&huart1 ,HOST_Buffer,1,HAL_MAX_DELAY);//TO receive the length first
 8000168:	f04f 33ff 	mov.w	r3, #4294967295
 800016c:	2201      	movs	r2, #1
 800016e:	4929      	ldr	r1, [pc, #164]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000170:	4829      	ldr	r0, [pc, #164]	; (8000218 <BL_FeatchHostCommand+0xcc>)
 8000172:	f001 ffba 	bl	80020ea <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	71bb      	strb	r3, [r7, #6]
	if(HAL_status!=HAL_OK)
 800017a:	79bb      	ldrb	r3, [r7, #6]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <BL_FeatchHostCommand+0x3a>
	{
		status=BL_NACK;
 8000180:	2300      	movs	r3, #0
 8000182:	71fb      	strb	r3, [r7, #7]
 8000184:	e041      	b.n	800020a <BL_FeatchHostCommand+0xbe>
	}
	else{
		data_length=HOST_Buffer[0];
 8000186:	4b23      	ldr	r3, [pc, #140]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	717b      	strb	r3, [r7, #5]
		HAL_status=	HAL_UART_Receive(&huart1 ,&HOST_Buffer[1],data_length,HAL_MAX_DELAY);//TO receive the command
 800018c:	797b      	ldrb	r3, [r7, #5]
 800018e:	b29a      	uxth	r2, r3
 8000190:	f04f 33ff 	mov.w	r3, #4294967295
 8000194:	4921      	ldr	r1, [pc, #132]	; (800021c <BL_FeatchHostCommand+0xd0>)
 8000196:	4820      	ldr	r0, [pc, #128]	; (8000218 <BL_FeatchHostCommand+0xcc>)
 8000198:	f001 ffa7 	bl	80020ea <HAL_UART_Receive>
 800019c:	4603      	mov	r3, r0
 800019e:	71bb      	strb	r3, [r7, #6]
		if(HAL_status!=HAL_OK)
 80001a0:	79bb      	ldrb	r3, [r7, #6]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d002      	beq.n	80001ac <BL_FeatchHostCommand+0x60>
			{
				status=BL_NACK;
 80001a6:	2300      	movs	r3, #0
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	e02e      	b.n	800020a <BL_FeatchHostCommand+0xbe>
			}
		else{
			switch(HOST_Buffer[1])
 80001ac:	4b19      	ldr	r3, [pc, #100]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 80001ae:	785b      	ldrb	r3, [r3, #1]
 80001b0:	3b10      	subs	r3, #16
 80001b2:	2b06      	cmp	r3, #6
 80001b4:	d827      	bhi.n	8000206 <BL_FeatchHostCommand+0xba>
 80001b6:	a201      	add	r2, pc, #4	; (adr r2, 80001bc <BL_FeatchHostCommand+0x70>)
 80001b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001bc:	080001d9 	.word	0x080001d9
 80001c0:	080001e1 	.word	0x080001e1
 80001c4:	080001e9 	.word	0x080001e9
 80001c8:	08000207 	.word	0x08000207
 80001cc:	080001f1 	.word	0x080001f1
 80001d0:	080001f7 	.word	0x080001f7
 80001d4:	080001ff 	.word	0x080001ff
			{

				case CBL_GET_VER_CMD:BL_GET_Version(HOST_Buffer);break;
 80001d8:	480e      	ldr	r0, [pc, #56]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 80001da:	f000 f947 	bl	800046c <BL_GET_Version>
 80001de:	e014      	b.n	800020a <BL_FeatchHostCommand+0xbe>
				case CBL_GET_HELP_CMD:BL_GET_Help(HOST_Buffer);break;
 80001e0:	480c      	ldr	r0, [pc, #48]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 80001e2:	f000 f979 	bl	80004d8 <BL_GET_Help>
 80001e6:	e010      	b.n	800020a <BL_FeatchHostCommand+0xbe>
				case CBL_GET_CID_CMD:BL_GET_Chip_Identification_Number(HOST_Buffer);break;
 80001e8:	480a      	ldr	r0, [pc, #40]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 80001ea:	f000 f9b1 	bl	8000550 <BL_GET_Chip_Identification_Number>
 80001ee:	e00c      	b.n	800020a <BL_FeatchHostCommand+0xbe>

				case CBL_GO_TO_ADDR_CMD:Bootloader_Jump_To_User_App();break;
 80001f0:	f000 fa80 	bl	80006f4 <Bootloader_Jump_To_User_App>
 80001f4:	e009      	b.n	800020a <BL_FeatchHostCommand+0xbe>
				case CBL_FLASH_ERASE_CMD:BL_FLASH_ERASE(HOST_Buffer);break;
 80001f6:	4807      	ldr	r0, [pc, #28]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 80001f8:	f000 f9e6 	bl	80005c8 <BL_FLASH_ERASE>
 80001fc:	e005      	b.n	800020a <BL_FeatchHostCommand+0xbe>
				case CBL_MEM_WRITE_CMD:BL_Write_Data(HOST_Buffer);break;
 80001fe:	4805      	ldr	r0, [pc, #20]	; (8000214 <BL_FeatchHostCommand+0xc8>)
 8000200:	f000 fa22 	bl	8000648 <BL_Write_Data>
 8000204:	e001      	b.n	800020a <BL_FeatchHostCommand+0xbe>

				default:status=BL_NACK;
 8000206:	2300      	movs	r3, #0
 8000208:	71fb      	strb	r3, [r7, #7]




	}
	return status;
 800020a:	79fb      	ldrb	r3, [r7, #7]



}
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000004c 	.word	0x2000004c
 8000218:	20000130 	.word	0x20000130
 800021c:	2000004d 	.word	0x2000004d

08000220 <BL_CRC_verify>:

static uint32_t BL_CRC_verify(uint8_t *pdata,uint32_t data_length,uint32_t HOST_CRC)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	uint8_t CRC_status=CRC_VERIFING_FAILED;
 800022c:	2300      	movs	r3, #0
 800022e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC=0;
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
	uint32_t data_buffer=0;
 8000234:	2300      	movs	r3, #0
 8000236:	613b      	str	r3, [r7, #16]
	/*uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)*/
	for(uint8_t count=0;count<data_length;count++)
 8000238:	2300      	movs	r3, #0
 800023a:	75fb      	strb	r3, [r7, #23]
 800023c:	e00f      	b.n	800025e <BL_CRC_verify+0x3e>
	{
		data_buffer=(uint32_t)pdata[count];
 800023e:	7dfb      	ldrb	r3, [r7, #23]
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	613b      	str	r3, [r7, #16]
		MCU_CRC=HAL_CRC_Accumulate(&hcrc,&data_buffer,1);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	2201      	movs	r2, #1
 800024e:	4619      	mov	r1, r3
 8000250:	4810      	ldr	r0, [pc, #64]	; (8000294 <BL_CRC_verify+0x74>)
 8000252:	f000 fe26 	bl	8000ea2 <HAL_CRC_Accumulate>
 8000256:	61b8      	str	r0, [r7, #24]
	for(uint8_t count=0;count<data_length;count++)
 8000258:	7dfb      	ldrb	r3, [r7, #23]
 800025a:	3301      	adds	r3, #1
 800025c:	75fb      	strb	r3, [r7, #23]
 800025e:	7dfb      	ldrb	r3, [r7, #23]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	429a      	cmp	r2, r3
 8000264:	d8eb      	bhi.n	800023e <BL_CRC_verify+0x1e>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <BL_CRC_verify+0x74>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	4b09      	ldr	r3, [pc, #36]	; (8000294 <BL_CRC_verify+0x74>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f042 0201 	orr.w	r2, r2, #1
 8000274:	609a      	str	r2, [r3, #8]
	if(HOST_CRC==MCU_CRC){
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	69bb      	ldr	r3, [r7, #24]
 800027a:	429a      	cmp	r2, r3
 800027c:	d102      	bne.n	8000284 <BL_CRC_verify+0x64>
		CRC_status=CRC_VERIFING_PASSED;
 800027e:	2301      	movs	r3, #1
 8000280:	77fb      	strb	r3, [r7, #31]
 8000282:	e001      	b.n	8000288 <BL_CRC_verify+0x68>
	}
	else{
		CRC_status=CRC_VERIFING_FAILED;
 8000284:	2300      	movs	r3, #0
 8000286:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_status;
 8000288:	7ffb      	ldrb	r3, [r7, #31]

}
 800028a:	4618      	mov	r0, r3
 800028c:	3720      	adds	r7, #32
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000118 	.word	0x20000118

08000298 <Perform_Flash_Erase>:

uint8_t Perform_Flash_Erase(uint32_t PageAddress,uint8_t page_Number)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	460b      	mov	r3, r1
 80002a2:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef pEraseInit;
	uint32_t PageError=0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60bb      	str	r3, [r7, #8]
	HAL_StatusTypeDef HAL_status=HAL_ERROR;
 80002a8:	2301      	movs	r3, #1
 80002aa:	77bb      	strb	r3, [r7, #30]
	uint8_t Pagestatus=INVALID_PAGE_NUMBER;
 80002ac:	2300      	movs	r3, #0
 80002ae:	77fb      	strb	r3, [r7, #31]
	if(page_Number>CBL_FLASH_MAX_PAGE_NUMBER)
 80002b0:	78fb      	ldrb	r3, [r7, #3]
 80002b2:	2b10      	cmp	r3, #16
 80002b4:	d902      	bls.n	80002bc <Perform_Flash_Erase+0x24>
	{
		Pagestatus=INVALID_PAGE_NUMBER;
 80002b6:	2300      	movs	r3, #0
 80002b8:	77fb      	strb	r3, [r7, #31]
 80002ba:	e035      	b.n	8000328 <Perform_Flash_Erase+0x90>

	}
	else{
		Pagestatus=VALID_PAGE_NUMBER;
 80002bc:	2301      	movs	r3, #1
 80002be:	77fb      	strb	r3, [r7, #31]
		if(page_Number<=(CBL_FLASH_MAX_PAGE_NUMBER-1)||PageAddress==CBL_FLASH_MASS_ERASE)
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b0f      	cmp	r3, #15
 80002c4:	d902      	bls.n	80002cc <Perform_Flash_Erase+0x34>
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2bff      	cmp	r3, #255	; 0xff
 80002ca:	d12b      	bne.n	8000324 <Perform_Flash_Erase+0x8c>
		{
			if(PageAddress==CBL_FLASH_MASS_ERASE)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2bff      	cmp	r3, #255	; 0xff
 80002d0:	d108      	bne.n	80002e4 <Perform_Flash_Erase+0x4c>
			{
				/*HAL_StatusTypeDef  HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError);
				 * */
				pEraseInit.TypeErase=FLASH_TYPEERASE_PAGES;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]

				pEraseInit.Banks=FLASH_BANK_1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	613b      	str	r3, [r7, #16]

				pEraseInit.PageAddress=0x8008000;
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <Perform_Flash_Erase+0x9c>)
 80002dc:	617b      	str	r3, [r7, #20]

				pEraseInit.NbPages=12;
 80002de:	230c      	movs	r3, #12
 80002e0:	61bb      	str	r3, [r7, #24]
 80002e2:	e007      	b.n	80002f4 <Perform_Flash_Erase+0x5c>


			}
			else{
				pEraseInit.TypeErase=FLASH_TYPEERASE_PAGES;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]

				pEraseInit.Banks=FLASH_BANK_1;
 80002e8:	2301      	movs	r3, #1
 80002ea:	613b      	str	r3, [r7, #16]

				pEraseInit.PageAddress=PageAddress;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	617b      	str	r3, [r7, #20]

				pEraseInit.NbPages=page_Number;
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	61bb      	str	r3, [r7, #24]

			}
			HAL_FLASH_Unlock();
 80002f4:	f000 fe70 	bl	8000fd8 <HAL_FLASH_Unlock>
			HAL_status=HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 80002f8:	f107 0208 	add.w	r2, r7, #8
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff50 	bl	80011a8 <HAL_FLASHEx_Erase>
 8000308:	4603      	mov	r3, r0
 800030a:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 800030c:	f000 fe8a 	bl	8001024 <HAL_FLASH_Lock>
			if(PageError==HAL_SUCCESSFUL_ERASE)
 8000310:	68bb      	ldr	r3, [r7, #8]
 8000312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000316:	d102      	bne.n	800031e <Perform_Flash_Erase+0x86>
			{
				Pagestatus=SUCCESSFUL_ERASE;
 8000318:	2303      	movs	r3, #3
 800031a:	77fb      	strb	r3, [r7, #31]
			if(PageError==HAL_SUCCESSFUL_ERASE)
 800031c:	e004      	b.n	8000328 <Perform_Flash_Erase+0x90>
			}
			else{
				Pagestatus=UNSUCCESSFUL_ERASE;
 800031e:	2302      	movs	r3, #2
 8000320:	77fb      	strb	r3, [r7, #31]
			if(PageError==HAL_SUCCESSFUL_ERASE)
 8000322:	e001      	b.n	8000328 <Perform_Flash_Erase+0x90>

			}

		}
		else{
			Pagestatus=INVALID_PAGE_NUMBER;
 8000324:	2300      	movs	r3, #0
 8000326:	77fb      	strb	r3, [r7, #31]

		}
	}
	return 	Pagestatus;
 8000328:	7ffb      	ldrb	r3, [r7, #31]


}
 800032a:	4618      	mov	r0, r3
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	08008000 	.word	0x08008000

08000338 <BL_Adddress_Verification>:

static uint8_t BL_Adddress_Verification(uint32_t Address)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	uint8_t Address_verify=ADDRESS_IS_INVALID;
 8000340:	2300      	movs	r3, #0
 8000342:	73fb      	strb	r3, [r7, #15]

	if(Address>=FLASH_BASE &&Address<=STM32F103_FLASH_END )
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800034a:	d306      	bcc.n	800035a <BL_Adddress_Verification+0x22>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <BL_Adddress_Verification+0x48>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d802      	bhi.n	800035a <BL_Adddress_Verification+0x22>
	{
		 Address_verify=ADDRESS_IS_VALID;
 8000354:	2301      	movs	r3, #1
 8000356:	73fb      	strb	r3, [r7, #15]
 8000358:	e00c      	b.n	8000374 <BL_Adddress_Verification+0x3c>
	}
	else if(Address>=SRAM_BASE &&Address<=STM32F103_SRAM_END )
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000360:	d306      	bcc.n	8000370 <BL_Adddress_Verification+0x38>
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a07      	ldr	r2, [pc, #28]	; (8000384 <BL_Adddress_Verification+0x4c>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d802      	bhi.n	8000370 <BL_Adddress_Verification+0x38>
	{
		 Address_verify=ADDRESS_IS_VALID;
 800036a:	2301      	movs	r3, #1
 800036c:	73fb      	strb	r3, [r7, #15]
 800036e:	e001      	b.n	8000374 <BL_Adddress_Verification+0x3c>

	}
	else{
		 Address_verify=ADDRESS_IS_INVALID;
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
	}
	return Address_verify;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	08010000 	.word	0x08010000
 8000384:	20005000 	.word	0x20005000

08000388 <FLASH_Memory_Payload_Write>:

static uint8_t FLASH_Memory_Payload_Write(uint16_t *pdata,uint32_t StartAddress,uint8_t Payload_data_length)
{
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	4613      	mov	r3, r2
 8000394:	71fb      	strb	r3, [r7, #7]
	uint32_t Address=0;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
	uint8_t UpdateAddress=0;
 800039a:	2300      	movs	r3, #0
 800039c:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef Hal_status=HAL_ERROR;
 800039e:	2301      	movs	r3, #1
 80003a0:	75bb      	strb	r3, [r7, #22]
	uint8_t payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 80003a2:	2300      	movs	r3, #0
 80003a4:	77fb      	strb	r3, [r7, #31]
	HAL_FLASH_Unlock();
 80003a6:	f000 fe17 	bl	8000fd8 <HAL_FLASH_Unlock>

	/*HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data);
	 * FLASH_TYPEPROGRAM_HALFWORD*/
	for(uint8_t payload_count=0,UpdateAddress=0;payload_count<Payload_data_length/2;payload_count++,UpdateAddress+=2)
 80003aa:	2300      	movs	r3, #0
 80003ac:	77bb      	strb	r3, [r7, #30]
 80003ae:	2300      	movs	r3, #0
 80003b0:	777b      	strb	r3, [r7, #29]
 80003b2:	e022      	b.n	80003fa <FLASH_Memory_Payload_Write+0x72>
	{
		Address=StartAddress+UpdateAddress;
 80003b4:	7f7b      	ldrb	r3, [r7, #29]
 80003b6:	68ba      	ldr	r2, [r7, #8]
 80003b8:	4413      	add	r3, r2
 80003ba:	61bb      	str	r3, [r7, #24]
		Hal_status=HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,pdata[payload_count]);
 80003bc:	7fbb      	ldrb	r3, [r7, #30]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	68fa      	ldr	r2, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	881b      	ldrh	r3, [r3, #0]
 80003c6:	b29b      	uxth	r3, r3
 80003c8:	2200      	movs	r2, #0
 80003ca:	461c      	mov	r4, r3
 80003cc:	4615      	mov	r5, r2
 80003ce:	4622      	mov	r2, r4
 80003d0:	462b      	mov	r3, r5
 80003d2:	69b9      	ldr	r1, [r7, #24]
 80003d4:	2001      	movs	r0, #1
 80003d6:	f000 fd8f 	bl	8000ef8 <HAL_FLASH_Program>
 80003da:	4603      	mov	r3, r0
 80003dc:	75bb      	strb	r3, [r7, #22]
		if(Hal_status!=HAL_OK)
 80003de:	7dbb      	ldrb	r3, [r7, #22]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d002      	beq.n	80003ea <FLASH_Memory_Payload_Write+0x62>
		{
			payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 80003e4:	2300      	movs	r3, #0
 80003e6:	77fb      	strb	r3, [r7, #31]
 80003e8:	e001      	b.n	80003ee <FLASH_Memory_Payload_Write+0x66>
		}
		else{
			payload_status=FLASH_PAYLOAD_WRITE_PASSED;
 80003ea:	2301      	movs	r3, #1
 80003ec:	77fb      	strb	r3, [r7, #31]
	for(uint8_t payload_count=0,UpdateAddress=0;payload_count<Payload_data_length/2;payload_count++,UpdateAddress+=2)
 80003ee:	7fbb      	ldrb	r3, [r7, #30]
 80003f0:	3301      	adds	r3, #1
 80003f2:	77bb      	strb	r3, [r7, #30]
 80003f4:	7f7b      	ldrb	r3, [r7, #29]
 80003f6:	3302      	adds	r3, #2
 80003f8:	777b      	strb	r3, [r7, #29]
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	085b      	lsrs	r3, r3, #1
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	7fba      	ldrb	r2, [r7, #30]
 8000402:	429a      	cmp	r2, r3
 8000404:	d3d6      	bcc.n	80003b4 <FLASH_Memory_Payload_Write+0x2c>
		}
	}



	HAL_FLASH_Lock();
 8000406:	f000 fe0d 	bl	8001024 <HAL_FLASH_Lock>

	return payload_status;
 800040a:	7ffb      	ldrb	r3, [r7, #31]

}
 800040c:	4618      	mov	r0, r3
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bdb0      	pop	{r4, r5, r7, pc}

08000414 <BL_sendACK>:




static void BL_sendACK(uint8_t data_length)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
	uint8_t ACK_value[2]={0};
 800041e:	2300      	movs	r3, #0
 8000420:	81bb      	strh	r3, [r7, #12]
	ACK_value[0]=SEND_ACK;
 8000422:	23cd      	movs	r3, #205	; 0xcd
 8000424:	733b      	strb	r3, [r7, #12]
	ACK_value[1]=data_length;
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(&huart1 ,(uint8_t*)ACK_value,2,HAL_MAX_DELAY);//TO receive the command
 800042a:	f107 010c 	add.w	r1, r7, #12
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
 8000432:	2202      	movs	r2, #2
 8000434:	4803      	ldr	r0, [pc, #12]	; (8000444 <BL_sendACK+0x30>)
 8000436:	f001 fdd5 	bl	8001fe4 <HAL_UART_Transmit>


}
 800043a:	bf00      	nop
 800043c:	3710      	adds	r7, #16
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	20000130 	.word	0x20000130

08000448 <BL_sendNACK>:
static void BL_sendNACK(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	uint8_t ACK_value=SEND_NACK;
 800044e:	23ab      	movs	r3, #171	; 0xab
 8000450:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1 ,&ACK_value,sizeof(ACK_value),HAL_MAX_DELAY);//TO receive the command
 8000452:	1df9      	adds	r1, r7, #7
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
 8000458:	2201      	movs	r2, #1
 800045a:	4803      	ldr	r0, [pc, #12]	; (8000468 <BL_sendNACK+0x20>)
 800045c:	f001 fdc2 	bl	8001fe4 <HAL_UART_Transmit>

}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000130 	.word	0x20000130

0800046c <BL_GET_Version>:

static void BL_GET_Version(uint8_t * HOST_Buffer)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	uint8_t version[4]={CBL_VENDOR_ID,CBL_SW_MAJOR_VERSION,CBL_SW_MINOR_VERSION,CBL_SW_PATCH_VERSION};
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <BL_GET_Version+0x64>)
 8000476:	60fb      	str	r3, [r7, #12]
	uint16_t HOST_Packet_length=0;
 8000478:	2300      	movs	r3, #0
 800047a:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_value=0;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]

	HOST_Packet_length=HOST_Buffer[0]+1;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b29b      	uxth	r3, r3
 8000486:	3301      	adds	r3, #1
 8000488:	82fb      	strh	r3, [r7, #22]
	CRC_value=*((uint32_t*)(HOST_Buffer+HOST_Packet_length-4));
 800048a:	8afb      	ldrh	r3, [r7, #22]
 800048c:	3b04      	subs	r3, #4
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	4413      	add	r3, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFING_PASSED==BL_CRC_verify((uint8_t *)&HOST_Buffer[0],HOST_Packet_length-4,CRC_value))
 8000496:	8afb      	ldrh	r3, [r7, #22]
 8000498:	3b04      	subs	r3, #4
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	4619      	mov	r1, r3
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff febe 	bl	8000220 <BL_CRC_verify>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10b      	bne.n	80004c2 <BL_GET_Version+0x56>
	{
		BL_sendACK(4);
 80004aa:	2004      	movs	r0, #4
 80004ac:	f7ff ffb2 	bl	8000414 <BL_sendACK>
		HAL_UART_Transmit(&huart1 ,(uint8_t*)version,4,HAL_MAX_DELAY);//TO receive the command
 80004b0:	f107 010c 	add.w	r1, r7, #12
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	2204      	movs	r2, #4
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <BL_GET_Version+0x68>)
 80004bc:	f001 fd92 	bl	8001fe4 <HAL_UART_Transmit>
	}
	else{
		BL_sendNACK();
	}

}
 80004c0:	e001      	b.n	80004c6 <BL_GET_Version+0x5a>
		BL_sendNACK();
 80004c2:	f7ff ffc1 	bl	8000448 <BL_sendNACK>
}
 80004c6:	bf00      	nop
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	00010165 	.word	0x00010165
 80004d4:	20000130 	.word	0x20000130

080004d8 <BL_GET_Help>:

static void BL_GET_Help(uint8_t * HOST_Buffer)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
		uint8_t BL_Supported_CMS[6]={CBL_GET_VER_CMD,CBL_GET_HELP_CMD,CBL_GET_CID_CMD,CBL_GO_TO_ADDR_CMD,CBL_FLASH_ERASE_CMD,CBL_MEM_WRITE_CMD};
 80004e0:	4a19      	ldr	r2, [pc, #100]	; (8000548 <BL_GET_Help+0x70>)
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ea:	6018      	str	r0, [r3, #0]
 80004ec:	3304      	adds	r3, #4
 80004ee:	8019      	strh	r1, [r3, #0]
		uint16_t HOST_Packet_length=0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	82fb      	strh	r3, [r7, #22]
		uint32_t CRC_value=0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	613b      	str	r3, [r7, #16]

		HOST_Packet_length=HOST_Buffer[0]+1;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	3301      	adds	r3, #1
 8000500:	82fb      	strh	r3, [r7, #22]
		CRC_value=*((uint32_t*)(HOST_Buffer+HOST_Packet_length-4));
 8000502:	8afb      	ldrh	r3, [r7, #22]
 8000504:	3b04      	subs	r3, #4
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	613b      	str	r3, [r7, #16]
		if(CRC_VERIFING_PASSED==BL_CRC_verify((uint8_t *)&HOST_Buffer[0],HOST_Packet_length-4,CRC_value))
 800050e:	8afb      	ldrh	r3, [r7, #22]
 8000510:	3b04      	subs	r3, #4
 8000512:	693a      	ldr	r2, [r7, #16]
 8000514:	4619      	mov	r1, r3
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f7ff fe82 	bl	8000220 <BL_CRC_verify>
 800051c:	4603      	mov	r3, r0
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10b      	bne.n	800053a <BL_GET_Help+0x62>
		{
			BL_sendACK(6);
 8000522:	2006      	movs	r0, #6
 8000524:	f7ff ff76 	bl	8000414 <BL_sendACK>
			HAL_UART_Transmit(&huart1 ,(uint8_t*)BL_Supported_CMS,6,HAL_MAX_DELAY);//TO receive the command
 8000528:	f107 0108 	add.w	r1, r7, #8
 800052c:	f04f 33ff 	mov.w	r3, #4294967295
 8000530:	2206      	movs	r2, #6
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <BL_GET_Help+0x74>)
 8000534:	f001 fd56 	bl	8001fe4 <HAL_UART_Transmit>
		}
		else{
			BL_sendNACK();
		}

}
 8000538:	e001      	b.n	800053e <BL_GET_Help+0x66>
			BL_sendNACK();
 800053a:	f7ff ff85 	bl	8000448 <BL_sendNACK>
}
 800053e:	bf00      	nop
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08002478 	.word	0x08002478
 800054c:	20000130 	.word	0x20000130

08000550 <BL_GET_Chip_Identification_Number>:

static void BL_GET_Chip_Identification_Number(uint8_t * HOST_Buffer)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint16_t Chip_ID=0;
 8000558:	2300      	movs	r3, #0
 800055a:	81fb      	strh	r3, [r7, #14]
	uint16_t HOST_Packet_length=0;
 800055c:	2300      	movs	r3, #0
 800055e:	82fb      	strh	r3, [r7, #22]
	uint32_t CRC_value=0;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]

	HOST_Packet_length=HOST_Buffer[0]+1;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b29b      	uxth	r3, r3
 800056a:	3301      	adds	r3, #1
 800056c:	82fb      	strh	r3, [r7, #22]
	CRC_value=*((uint32_t*)(HOST_Buffer+HOST_Packet_length-4));
 800056e:	8afb      	ldrh	r3, [r7, #22]
 8000570:	3b04      	subs	r3, #4
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	613b      	str	r3, [r7, #16]
	if(CRC_VERIFING_PASSED==BL_CRC_verify((uint8_t *)&HOST_Buffer[0],HOST_Packet_length-4,CRC_value))
 800057a:	8afb      	ldrh	r3, [r7, #22]
 800057c:	3b04      	subs	r3, #4
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f7ff fe4c 	bl	8000220 <BL_CRC_verify>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d112      	bne.n	80005b4 <BL_GET_Chip_Identification_Number+0x64>
	{
		Chip_ID=(uint16_t)(DBGMCU->IDCODE &0x00000FFF);
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <BL_GET_Chip_Identification_Number+0x70>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	b29b      	uxth	r3, r3
 8000594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000598:	b29b      	uxth	r3, r3
 800059a:	81fb      	strh	r3, [r7, #14]
		BL_sendACK(2);
 800059c:	2002      	movs	r0, #2
 800059e:	f7ff ff39 	bl	8000414 <BL_sendACK>
		HAL_UART_Transmit(&huart1 ,(uint8_t*)&Chip_ID,2,HAL_MAX_DELAY);//TO receive the command
 80005a2:	f107 010e 	add.w	r1, r7, #14
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2202      	movs	r2, #2
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <BL_GET_Chip_Identification_Number+0x74>)
 80005ae:	f001 fd19 	bl	8001fe4 <HAL_UART_Transmit>
	else{
		BL_sendNACK();
	}


}
 80005b2:	e001      	b.n	80005b8 <BL_GET_Chip_Identification_Number+0x68>
		BL_sendNACK();
 80005b4:	f7ff ff48 	bl	8000448 <BL_sendNACK>
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	e0042000 	.word	0xe0042000
 80005c4:	20000130 	.word	0x20000130

080005c8 <BL_FLASH_ERASE>:


static void BL_FLASH_ERASE(uint8_t * HOST_Buffer)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
		uint8_t Erase_status=UNSUCCESSFUL_ERASE;
 80005d0:	2302      	movs	r3, #2
 80005d2:	73fb      	strb	r3, [r7, #15]
		uint16_t HOST_Packet_length=0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	82fb      	strh	r3, [r7, #22]
		uint32_t CRC_value=0;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]

		HOST_Packet_length=HOST_Buffer[0]+1;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	3301      	adds	r3, #1
 80005e4:	82fb      	strh	r3, [r7, #22]
		CRC_value=*((uint32_t*)(HOST_Buffer+HOST_Packet_length-4));
 80005e6:	8afb      	ldrh	r3, [r7, #22]
 80005e8:	3b04      	subs	r3, #4
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	613b      	str	r3, [r7, #16]
		if(CRC_VERIFING_PASSED==BL_CRC_verify((uint8_t *)&HOST_Buffer[0],HOST_Packet_length-4,CRC_value))
 80005f2:	8afb      	ldrh	r3, [r7, #22]
 80005f4:	3b04      	subs	r3, #4
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	4619      	mov	r1, r3
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff fe10 	bl	8000220 <BL_CRC_verify>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d117      	bne.n	8000636 <BL_FLASH_ERASE+0x6e>
		{
			Erase_status=Perform_Flash_Erase(*((uint32_t*)&HOST_Buffer[7]),HOST_Buffer[6]);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3307      	adds	r3, #7
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3306      	adds	r3, #6
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4619      	mov	r1, r3
 8000614:	4610      	mov	r0, r2
 8000616:	f7ff fe3f 	bl	8000298 <Perform_Flash_Erase>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]
			BL_sendACK(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f7ff fef8 	bl	8000414 <BL_sendACK>
			HAL_UART_Transmit(&huart1 ,(uint8_t*)&Erase_status,1,HAL_MAX_DELAY);//TO receive the command
 8000624:	f107 010f 	add.w	r1, r7, #15
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <BL_FLASH_ERASE+0x7c>)
 8000630:	f001 fcd8 	bl	8001fe4 <HAL_UART_Transmit>
		else{
			BL_sendNACK();
		}


}
 8000634:	e001      	b.n	800063a <BL_FLASH_ERASE+0x72>
			BL_sendNACK();
 8000636:	f7ff ff07 	bl	8000448 <BL_sendNACK>
}
 800063a:	bf00      	nop
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000130 	.word	0x20000130

08000648 <BL_Write_Data>:

uint16_t i=0;
static void BL_Write_Data(uint8_t * HOST_Buffer)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
			uint8_t Address_verify=ADDRESS_IS_INVALID;
 8000650:	2300      	movs	r3, #0
 8000652:	72fb      	strb	r3, [r7, #11]
			uint32_t Address_HOST=0;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
			uint8_t Data_length=0;
 8000658:	2300      	movs	r3, #0
 800065a:	74fb      	strb	r3, [r7, #19]
			uint8_t payload_status=FLASH_PAYLOAD_WRITE_FAILED;
 800065c:	2300      	movs	r3, #0
 800065e:	72bb      	strb	r3, [r7, #10]
			uint16_t HOST_Packet_length=0;
 8000660:	2300      	movs	r3, #0
 8000662:	823b      	strh	r3, [r7, #16]
			uint32_t CRC_value=0;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]

			HOST_Packet_length=HOST_Buffer[0]+1;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b29b      	uxth	r3, r3
 800066e:	3301      	adds	r3, #1
 8000670:	823b      	strh	r3, [r7, #16]
			CRC_value=*((uint32_t*)(HOST_Buffer+HOST_Packet_length-4));
 8000672:	8a3b      	ldrh	r3, [r7, #16]
 8000674:	3b04      	subs	r3, #4
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
			//if(CRC_VERIFING_PASSED==BL_CRC_verify((uint8_t *)&HOST_Buffer[0],HOST_Packet_length-4,CRC_value))
			//{
				//BL_sendACK(1);
				/*Extract the start address from the host address*/
				Address_HOST=*((uint32_t*)&HOST_Buffer[2])+64*i;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3302      	adds	r3, #2
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <BL_Write_Data+0xa4>)
 8000686:	8812      	ldrh	r2, [r2, #0]
 8000688:	0192      	lsls	r2, r2, #6
 800068a:	4413      	add	r3, r2
 800068c:	617b      	str	r3, [r7, #20]
				i++;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <BL_Write_Data+0xa4>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <BL_Write_Data+0xa4>)
 8000698:	801a      	strh	r2, [r3, #0]
				/* Extract the payload length from the Host packet because the address is in 4 bytes*/
				Data_length=HOST_Buffer[6];
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	799b      	ldrb	r3, [r3, #6]
 800069e:	74fb      	strb	r3, [r7, #19]
				Address_verify=BL_Adddress_Verification(Address_HOST);
 80006a0:	6978      	ldr	r0, [r7, #20]
 80006a2:	f7ff fe49 	bl	8000338 <BL_Adddress_Verification>
 80006a6:	4603      	mov	r3, r0
 80006a8:	72fb      	strb	r3, [r7, #11]
				if(Address_verify==ADDRESS_IS_VALID)
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d111      	bne.n	80006d4 <BL_Write_Data+0x8c>
				{
					//flash
					payload_status=FLASH_Memory_Payload_Write((uint16_t*)&HOST_Buffer[7],Address_HOST,Data_length);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3307      	adds	r3, #7
 80006b4:	7cfa      	ldrb	r2, [r7, #19]
 80006b6:	6979      	ldr	r1, [r7, #20]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fe65 	bl	8000388 <FLASH_Memory_Payload_Write>
 80006be:	4603      	mov	r3, r0
 80006c0:	72bb      	strb	r3, [r7, #10]
					HAL_UART_Transmit(&huart1 ,(uint8_t*)&payload_status,1,HAL_MAX_DELAY);//TO receive the command
 80006c2:	f107 010a 	add.w	r1, r7, #10
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ca:	2201      	movs	r2, #1
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <BL_Write_Data+0xa8>)
 80006ce:	f001 fc89 	bl	8001fe4 <HAL_UART_Transmit>

			/*else{
				BL_sendNACK();
			}*/

}
 80006d2:	e007      	b.n	80006e4 <BL_Write_Data+0x9c>
					HAL_UART_Transmit(&huart1 ,(uint8_t*)&Address_verify,1,HAL_MAX_DELAY);//TO receive the command
 80006d4:	f107 010b 	add.w	r1, r7, #11
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295
 80006dc:	2201      	movs	r2, #1
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <BL_Write_Data+0xa8>)
 80006e0:	f001 fc80 	bl	8001fe4 <HAL_UART_Transmit>
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000114 	.word	0x20000114
 80006f0:	20000130 	.word	0x20000130

080006f4 <Bootloader_Jump_To_User_App>:
/***********************JUMP TO USER APPLICATION***********************/
void Bootloader_Jump_To_User_App(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
		uint32_t MSP_Value = *((volatile uint32_t*)FLASH_SECTOR2_BASE_ADDRESS);
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <Bootloader_Jump_To_User_App+0x34>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	60fb      	str	r3, [r7, #12]
		uint32_t MainAppAdd = *((volatile uint32_t*)(FLASH_SECTOR2_BASE_ADDRESS+4));
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <Bootloader_Jump_To_User_App+0x38>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60bb      	str	r3, [r7, #8]

		pMainApp ResetHandler_Address=(pMainApp)MainAppAdd;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	607b      	str	r3, [r7, #4]
		HAL_RCC_DeInit();
 800070a:	f000 ff71 	bl	80015f0 <HAL_RCC_DeInit>
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	f383 8808 	msr	MSP, r3
}
 8000718:	bf00      	nop
		__set_MSP(MSP_Value);
		ResetHandler_Address();
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4798      	blx	r3
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	08008000 	.word	0x08008000
 800072c:	08008004 	.word	0x08008004

08000730 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_CRC_Init+0x20>)
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <MX_CRC_Init+0x24>)
 8000738:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_CRC_Init+0x20>)
 800073c:	f000 fb95 	bl	8000e6a <HAL_CRC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000746:	f000 f8e8 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000118 	.word	0x20000118
 8000754:	40023000 	.word	0x40023000

08000758 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a09      	ldr	r2, [pc, #36]	; (800078c <HAL_CRC_MspInit+0x34>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d10b      	bne.n	8000782 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_CRC_MspInit+0x38>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_CRC_MspInit+0x38>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_CRC_MspInit+0x38>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40023000 	.word	0x40023000
 8000790:	40021000 	.word	0x40021000

08000794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_GPIO_Init+0x28>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	4a07      	ldr	r2, [pc, #28]	; (80007bc <MX_GPIO_Init+0x28>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6193      	str	r3, [r2, #24]
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <MX_GPIO_Init+0x28>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000

080007c0 <ckeakStart>:
uint8_t check[16]="Bootloader Start";
uint8_t Erase[16]="Bootloader Erase";
uint8_t start[16]={0};
uint8_t flag=0;
uint8_t ckeakStart()
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	uint8_t count=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, start, sizeof(check), HAL_MAX_DELAY);
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2210      	movs	r2, #16
 80007d0:	491d      	ldr	r1, [pc, #116]	; (8000848 <ckeakStart+0x88>)
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <ckeakStart+0x8c>)
 80007d4:	f001 fc89 	bl	80020ea <HAL_UART_Receive>

	while(check[count]!='\0')
 80007d8:	e00a      	b.n	80007f0 <ckeakStart+0x30>
	{
		if(start[count] != check[count])
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <ckeakStart+0x88>)
 80007de:	5cd2      	ldrb	r2, [r2, r3]
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	491b      	ldr	r1, [pc, #108]	; (8000850 <ckeakStart+0x90>)
 80007e4:	5ccb      	ldrb	r3, [r1, r3]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d108      	bne.n	80007fc <ckeakStart+0x3c>
			break;
		count++;
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	3301      	adds	r3, #1
 80007ee:	71fb      	strb	r3, [r7, #7]
	while(check[count]!='\0')
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <ckeakStart+0x90>)
 80007f4:	5cd3      	ldrb	r3, [r2, r3]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1ef      	bne.n	80007da <ckeakStart+0x1a>
 80007fa:	e000      	b.n	80007fe <ckeakStart+0x3e>
			break;
 80007fc:	bf00      	nop
	}
	if(count == 16)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b10      	cmp	r3, #16
 8000802:	d101      	bne.n	8000808 <ckeakStart+0x48>
		return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e01a      	b.n	800083e <ckeakStart+0x7e>

	else{
		count=0;
 8000808:	2300      	movs	r3, #0
 800080a:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 800080c:	e00a      	b.n	8000824 <ckeakStart+0x64>
		{
			if(start[count] != Erase[count])
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <ckeakStart+0x88>)
 8000812:	5cd2      	ldrb	r2, [r2, r3]
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	490f      	ldr	r1, [pc, #60]	; (8000854 <ckeakStart+0x94>)
 8000818:	5ccb      	ldrb	r3, [r1, r3]
 800081a:	429a      	cmp	r2, r3
 800081c:	d108      	bne.n	8000830 <ckeakStart+0x70>
				break;
			count++;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3301      	adds	r3, #1
 8000822:	71fb      	strb	r3, [r7, #7]
		while(Erase[count]!='\0')
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <ckeakStart+0x94>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1ef      	bne.n	800080e <ckeakStart+0x4e>
 800082e:	e000      	b.n	8000832 <ckeakStart+0x72>
				break;
 8000830:	bf00      	nop
		}
		if(count == 16)
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b10      	cmp	r3, #16
 8000836:	d101      	bne.n	800083c <ckeakStart+0x7c>
			return 2;
 8000838:	2302      	movs	r3, #2
 800083a:	e000      	b.n	800083e <ckeakStart+0x7e>
	}
	return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000120 	.word	0x20000120
 800084c:	20000130 	.word	0x20000130
 8000850:	20000000 	.word	0x20000000
 8000854:	20000010 	.word	0x20000010

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 f9bf 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f81f 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f7ff ff95 	bl	8000794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800086a:	f000 f8bb 	bl	80009e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800086e:	f000 f8e3 	bl	8000a38 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000872:	f7ff ff5d 	bl	8000730 <MX_CRC_Init>
	//  {
		//  HAL_UART_Transmit(&huart1 ,"a33",3,HAL_MAX_DELAY);
	  //}
	//BL_FeatchHostCommand();
#if 1
	  uint8_t d=ckeakStart();
 8000876:	f7ff ffa3 	bl	80007c0 <ckeakStart>
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	  if(d== 1)
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d102      	bne.n	800088a <main+0x32>
	  {
		  //HAL_UART_Receive(&huart2, &hh, 1, HAL_MAX_DELAY);

		  BL_FeatchHostCommand();
 8000884:	f7ff fc62 	bl	800014c <BL_FeatchHostCommand>
 8000888:	e7f5      	b.n	8000876 <main+0x1e>
	  }
	  else if(d==2)
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d104      	bne.n	800089a <main+0x42>
	  {
		  Perform_Flash_Erase(0x8008000,12);
 8000890:	210c      	movs	r1, #12
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <main+0x48>)
 8000894:	f7ff fd00 	bl	8000298 <Perform_Flash_Erase>
 8000898:	e7ed      	b.n	8000876 <main+0x1e>
	  }
	  else{
		  Bootloader_Jump_To_User_App();
 800089a:	f7ff ff2b 	bl	80006f4 <Bootloader_Jump_To_User_App>
  {
 800089e:	e7ea      	b.n	8000876 <main+0x1e>
 80008a0:	08008000 	.word	0x08008000

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b090      	sub	sp, #64	; 0x40
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fda8 	bl	8002408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ca:	2301      	movs	r3, #1
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2310      	movs	r3, #16
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff22 	bl	8001724 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008e6:	f000 f818 	bl	800091a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f990 	bl	8001c28 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800090e:	f000 f804 	bl	800091a <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3740      	adds	r7, #64	; 0x40
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
}
 8000920:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000922:	e7fe      	b.n	8000922 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_MspInit+0x5c>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	4a14      	ldr	r2, [pc, #80]	; (8000980 <HAL_MspInit+0x5c>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6193      	str	r3, [r2, #24]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_MspInit+0x5c>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x5c>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x5c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x5c>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_MspInit+0x60>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_MspInit+0x60>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000
 8000984:	40010000 	.word	0x40010000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 f94d 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_USART1_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	f001 fa92 	bl	8001f44 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f7ff ff78 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000130 	.word	0x20000130
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART2_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART2_UART_Init+0x4c>)
 8000a70:	f001 fa68 	bl	8001f44 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f7ff ff4e 	bl	800091a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000178 	.word	0x20000178
 8000a88:	40004400 	.word	0x40004400

08000a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <HAL_UART_MspInit+0xf8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d132      	bne.n	8000b12 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a35      	ldr	r2, [pc, #212]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000adc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <HAL_UART_MspInit+0x100>)
 8000af2:	f000 fc01 	bl	80012f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4820      	ldr	r0, [pc, #128]	; (8000b8c <HAL_UART_MspInit+0x100>)
 8000b0c:	f000 fbf4 	bl	80012f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b10:	e034      	b.n	8000b7c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <HAL_UART_MspInit+0x104>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d12f      	bne.n	8000b7c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b26:	61d3      	str	r3, [r2, #28]
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b2a:	69db      	ldr	r3, [r3, #28]
 8000b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_UART_MspInit+0xfc>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480b      	ldr	r0, [pc, #44]	; (8000b8c <HAL_UART_MspInit+0x100>)
 8000b60:	f000 fbca 	bl	80012f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b64:	2308      	movs	r3, #8
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0318 	add.w	r3, r7, #24
 8000b74:	4619      	mov	r1, r3
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <HAL_UART_MspInit+0x100>)
 8000b78:	f000 fbbe 	bl	80012f8 <HAL_GPIO_Init>
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40013800 	.word	0x40013800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40004400 	.word	0x40004400

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff ff1f 	bl	80009d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 fc2b 	bl	8002418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fe49 	bl	8000858 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000bd0:	080024b4 	.word	0x080024b4
  ldr r2, =_sbss
 8000bd4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000bd8:	200001e8 	.word	0x200001e8

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f907 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe92 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f911 	bl	8000e52 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f8e7 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000020 	.word	0x20000020
 8000c64:	20000028 	.word	0x20000028
 8000c68:	20000024 	.word	0x20000024

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	200001c0 	.word	0x200001c0

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	200001c0 	.word	0x200001c0

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff49 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff5e 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffb0 	bl	8000dc0 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e00e      	b.n	8000e9a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d105      	bne.n	8000e92 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff fc63 	bl	8000758 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	441a      	add	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3f0      	bcc.n	8000ebe <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000eea:	693b      	ldr	r3, [r7, #16]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000f14:	7e1b      	ldrb	r3, [r3, #24]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d101      	bne.n	8000f1e <HAL_FLASH_Program+0x26>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e054      	b.n	8000fc8 <HAL_FLASH_Program+0xd0>
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f28:	f000 f8a8 	bl	800107c <FLASH_WaitForLastOperation>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d144      	bne.n	8000fc0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	757b      	strb	r3, [r7, #21]
 8000f40:	e007      	b.n	8000f52 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d102      	bne.n	8000f4e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	757b      	strb	r3, [r7, #21]
 8000f4c:	e001      	b.n	8000f52 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	75bb      	strb	r3, [r7, #22]
 8000f56:	e02d      	b.n	8000fb4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f58:	7dbb      	ldrb	r3, [r7, #22]
 8000f5a:	005a      	lsls	r2, r3, #1
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	eb02 0c03 	add.w	ip, r2, r3
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	0119      	lsls	r1, r3, #4
 8000f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6a:	f1c1 0620 	rsb	r6, r1, #32
 8000f6e:	f1a1 0020 	sub.w	r0, r1, #32
 8000f72:	fa22 f401 	lsr.w	r4, r2, r1
 8000f76:	fa03 f606 	lsl.w	r6, r3, r6
 8000f7a:	4334      	orrs	r4, r6
 8000f7c:	fa23 f000 	lsr.w	r0, r3, r0
 8000f80:	4304      	orrs	r4, r0
 8000f82:	fa23 f501 	lsr.w	r5, r3, r1
 8000f86:	b2a3      	uxth	r3, r4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4660      	mov	r0, ip
 8000f8c:	f000 f85a 	bl	8001044 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f94:	f000 f872 	bl	800107c <FLASH_WaitForLastOperation>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_FLASH_Program+0xdc>)
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	; (8000fd4 <HAL_FLASH_Program+0xdc>)
 8000fa2:	f023 0301 	bic.w	r3, r3, #1
 8000fa6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d107      	bne.n	8000fbe <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fae:	7dbb      	ldrb	r3, [r7, #22]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	75bb      	strb	r3, [r7, #22]
 8000fb4:	7dba      	ldrb	r2, [r7, #22]
 8000fb6:	7d7b      	ldrb	r3, [r7, #21]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3cd      	bcc.n	8000f58 <HAL_FLASH_Program+0x60>
 8000fbc:	e000      	b.n	8000fc0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000fbe:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_FLASH_Program+0xd8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	761a      	strb	r2, [r3, #24]

  return status;
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd0:	200001c8 	.word	0x200001c8
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_FLASH_Unlock+0x40>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00d      	beq.n	800100a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_FLASH_Unlock+0x44>)
 8000ff2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_FLASH_Unlock+0x48>)
 8000ff8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <HAL_FLASH_Unlock+0x40>)
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40022000 	.word	0x40022000
 800101c:	45670123 	.word	0x45670123
 8001020:	cdef89ab 	.word	0xcdef89ab

08001024 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_FLASH_Lock+0x1c>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_FLASH_Lock+0x1c>)
 800102e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001032:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40022000 	.word	0x40022000

08001044 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <FLASH_Program_HalfWord+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <FLASH_Program_HalfWord+0x34>)
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <FLASH_Program_HalfWord+0x34>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	887a      	ldrh	r2, [r7, #2]
 8001066:	801a      	strh	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001c8 	.word	0x200001c8
 8001078:	40022000 	.word	0x40022000

0800107c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff fe04 	bl	8000c90 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800108a:	e010      	b.n	80010ae <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001092:	d00c      	beq.n	80010ae <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <FLASH_WaitForLastOperation+0x2e>
 800109a:	f7ff fdf9 	bl	8000c90 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d201      	bcs.n	80010ae <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e025      	b.n	80010fa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1e8      	bne.n	800108c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010c8:	2220      	movs	r2, #32
 80010ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0310 	and.w	r3, r3, #16
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10b      	bne.n	80010f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d105      	bne.n	80010f0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <FLASH_WaitForLastOperation+0x88>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010f0:	f000 f80a 	bl	8001108 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000

08001108 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	d009      	beq.n	8001132 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001128:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001148:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00b      	beq.n	8001176 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <FLASH_SetErrorCode+0x9c>)
 8001168:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f240 1201 	movw	r2, #257	; 0x101
 800117c:	4293      	cmp	r3, r2
 800117e:	d106      	bne.n	800118e <FLASH_SetErrorCode+0x86>
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001186:	f023 0301 	bic.w	r3, r3, #1
 800118a:	61d3      	str	r3, [r2, #28]
}  
 800118c:	e002      	b.n	8001194 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <FLASH_SetErrorCode+0x98>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60d3      	str	r3, [r2, #12]
}  
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000
 80011a4:	200001c8 	.word	0x200001c8

080011a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <HAL_FLASHEx_Erase+0xd0>)
 80011bc:	7e1b      	ldrb	r3, [r3, #24]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_FLASHEx_Erase+0x1e>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e053      	b.n	800126e <HAL_FLASHEx_Erase+0xc6>
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <HAL_FLASHEx_Erase+0xd0>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d116      	bne.n	8001202 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d8:	f7ff ff50 	bl	800107c <FLASH_WaitForLastOperation>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d141      	bne.n	8001266 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80011e2:	2001      	movs	r0, #1
 80011e4:	f000 f84c 	bl	8001280 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011ec:	f7ff ff46 	bl	800107c <FLASH_WaitForLastOperation>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <HAL_FLASHEx_Erase+0xd4>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <HAL_FLASHEx_Erase+0xd4>)
 80011fa:	f023 0304 	bic.w	r3, r3, #4
 80011fe:	6113      	str	r3, [r2, #16]
 8001200:	e031      	b.n	8001266 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001202:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001206:	f7ff ff39 	bl	800107c <FLASH_WaitForLastOperation>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d12a      	bne.n	8001266 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f04f 32ff 	mov.w	r2, #4294967295
 8001216:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	e019      	b.n	8001254 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001220:	68b8      	ldr	r0, [r7, #8]
 8001222:	f000 f849 	bl	80012b8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001226:	f24c 3050 	movw	r0, #50000	; 0xc350
 800122a:	f7ff ff27 	bl	800107c <FLASH_WaitForLastOperation>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_FLASHEx_Erase+0xd4>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_FLASHEx_Erase+0xd4>)
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	601a      	str	r2, [r3, #0]
            break;
 800124a:	e00c      	b.n	8001266 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001252:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	029a      	lsls	r2, r3, #10
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	4413      	add	r3, r2
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3dc      	bcc.n	8001220 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_FLASHEx_Erase+0xd0>)
 8001268:	2200      	movs	r2, #0
 800126a:	761a      	strb	r2, [r3, #24]

  return status;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001c8 	.word	0x200001c8
 800127c:	40022000 	.word	0x40022000

08001280 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <FLASH_MassErase+0x30>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <FLASH_MassErase+0x34>)
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <FLASH_MassErase+0x34>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <FLASH_MassErase+0x34>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <FLASH_MassErase+0x34>)
 80012a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	200001c8 	.word	0x200001c8
 80012b4:	40022000 	.word	0x40022000

080012b8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <FLASH_PageErase+0x38>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <FLASH_PageErase+0x3c>)
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <FLASH_PageErase+0x3c>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <FLASH_PageErase+0x3c>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <FLASH_PageErase+0x3c>)
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <FLASH_PageErase+0x3c>)
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200001c8 	.word	0x200001c8
 80012f4:	40022000 	.word	0x40022000

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b08b      	sub	sp, #44	; 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e161      	b.n	80015d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800130c:	2201      	movs	r2, #1
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	429a      	cmp	r2, r3
 8001326:	f040 8150 	bne.w	80015ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4a97      	ldr	r2, [pc, #604]	; (800158c <HAL_GPIO_Init+0x294>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d05e      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001334:	4a95      	ldr	r2, [pc, #596]	; (800158c <HAL_GPIO_Init+0x294>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d875      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800133a:	4a95      	ldr	r2, [pc, #596]	; (8001590 <HAL_GPIO_Init+0x298>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d058      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001340:	4a93      	ldr	r2, [pc, #588]	; (8001590 <HAL_GPIO_Init+0x298>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d86f      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001346:	4a93      	ldr	r2, [pc, #588]	; (8001594 <HAL_GPIO_Init+0x29c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d052      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 800134c:	4a91      	ldr	r2, [pc, #580]	; (8001594 <HAL_GPIO_Init+0x29c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d869      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001352:	4a91      	ldr	r2, [pc, #580]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d04c      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001358:	4a8f      	ldr	r2, [pc, #572]	; (8001598 <HAL_GPIO_Init+0x2a0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d863      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800135e:	4a8f      	ldr	r2, [pc, #572]	; (800159c <HAL_GPIO_Init+0x2a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d046      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
 8001364:	4a8d      	ldr	r2, [pc, #564]	; (800159c <HAL_GPIO_Init+0x2a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d85d      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 800136a:	2b12      	cmp	r3, #18
 800136c:	d82a      	bhi.n	80013c4 <HAL_GPIO_Init+0xcc>
 800136e:	2b12      	cmp	r3, #18
 8001370:	d859      	bhi.n	8001426 <HAL_GPIO_Init+0x12e>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <HAL_GPIO_Init+0x80>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013f3 	.word	0x080013f3
 800137c:	080013cd 	.word	0x080013cd
 8001380:	080013df 	.word	0x080013df
 8001384:	08001421 	.word	0x08001421
 8001388:	08001427 	.word	0x08001427
 800138c:	08001427 	.word	0x08001427
 8001390:	08001427 	.word	0x08001427
 8001394:	08001427 	.word	0x08001427
 8001398:	08001427 	.word	0x08001427
 800139c:	08001427 	.word	0x08001427
 80013a0:	08001427 	.word	0x08001427
 80013a4:	08001427 	.word	0x08001427
 80013a8:	08001427 	.word	0x08001427
 80013ac:	08001427 	.word	0x08001427
 80013b0:	08001427 	.word	0x08001427
 80013b4:	08001427 	.word	0x08001427
 80013b8:	08001427 	.word	0x08001427
 80013bc:	080013d5 	.word	0x080013d5
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	4a76      	ldr	r2, [pc, #472]	; (80015a0 <HAL_GPIO_Init+0x2a8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ca:	e02c      	b.n	8001426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e029      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	3304      	adds	r3, #4
 80013da:	623b      	str	r3, [r7, #32]
          break;
 80013dc:	e024      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	3308      	adds	r3, #8
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e01f      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	330c      	adds	r3, #12
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e01a      	b.n	8001428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013fa:	2304      	movs	r3, #4
 80013fc:	623b      	str	r3, [r7, #32]
          break;
 80013fe:	e013      	b.n	8001428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d105      	bne.n	8001414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001408:	2308      	movs	r3, #8
 800140a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	611a      	str	r2, [r3, #16]
          break;
 8001412:	e009      	b.n	8001428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001414:	2308      	movs	r3, #8
 8001416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	615a      	str	r2, [r3, #20]
          break;
 800141e:	e003      	b.n	8001428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
          break;
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x130>
          break;
 8001426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2bff      	cmp	r3, #255	; 0xff
 800142c:	d801      	bhi.n	8001432 <HAL_GPIO_Init+0x13a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	e001      	b.n	8001436 <HAL_GPIO_Init+0x13e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3304      	adds	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d802      	bhi.n	8001444 <HAL_GPIO_Init+0x14c>
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x152>
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	3b08      	subs	r3, #8
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	210f      	movs	r1, #15
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	6a39      	ldr	r1, [r7, #32]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80a9 	beq.w	80015ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001478:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_GPIO_Init+0x2ac>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001490:	4a45      	ldr	r2, [pc, #276]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	3302      	adds	r3, #2
 8001498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a3d      	ldr	r2, [pc, #244]	; (80015ac <HAL_GPIO_Init+0x2b4>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00d      	beq.n	80014d8 <HAL_GPIO_Init+0x1e0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a3c      	ldr	r2, [pc, #240]	; (80015b0 <HAL_GPIO_Init+0x2b8>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0x1dc>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a3b      	ldr	r2, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x2bc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_GPIO_Init+0x1d8>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e004      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e002      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <HAL_GPIO_Init+0x1e2>
 80014d8:	2300      	movs	r3, #0
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	f002 0203 	and.w	r2, r2, #3
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	4093      	lsls	r3, r2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ea:	492f      	ldr	r1, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x2b0>)
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d006      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	492b      	ldr	r1, [pc, #172]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
 8001510:	e006      	b.n	8001520 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	43db      	mvns	r3, r3
 800151a:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800151c:	4013      	ands	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	4921      	ldr	r1, [pc, #132]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	60cb      	str	r3, [r1, #12]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001544:	4013      	ands	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4917      	ldr	r1, [pc, #92]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	4913      	ldr	r1, [pc, #76]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800156c:	4013      	ands	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d01f      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	490d      	ldr	r1, [pc, #52]	; (80015b8 <HAL_GPIO_Init+0x2c0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
 8001588:	e01f      	b.n	80015ca <HAL_GPIO_Init+0x2d2>
 800158a:	bf00      	nop
 800158c:	10320000 	.word	0x10320000
 8001590:	10310000 	.word	0x10310000
 8001594:	10220000 	.word	0x10220000
 8001598:	10210000 	.word	0x10210000
 800159c:	10120000 	.word	0x10120000
 80015a0:	10110000 	.word	0x10110000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4909      	ldr	r1, [pc, #36]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	3301      	adds	r3, #1
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f47f ae96 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	372c      	adds	r7, #44	; 0x2c
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	40010400 	.word	0x40010400

080015f0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80015f6:	f7ff fb4b 	bl	8000c90 <HAL_GetTick>
 80015fa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015fc:	4b45      	ldr	r3, [pc, #276]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a44      	ldr	r2, [pc, #272]	; (8001714 <HAL_RCC_DeInit+0x124>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fb41 	bl	8000c90 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e077      	b.n	800170c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800161c:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_DeInit+0x124>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001628:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <HAL_RCC_DeInit+0x124>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001630:	4a38      	ldr	r2, [pc, #224]	; (8001714 <HAL_RCC_DeInit+0x124>)
 8001632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001636:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fb2a 	bl	8000c90 <HAL_GetTick>
 800163c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <HAL_RCC_DeInit+0x124>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff fb23 	bl	8000c90 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e057      	b.n	800170c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_DeInit+0x124>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001668:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_RCC_DeInit+0x128>)
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <HAL_RCC_DeInit+0x12c>)
 800166c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800166e:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <HAL_RCC_DeInit+0x130>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff faca 	bl	8000c0c <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e044      	b.n	800170c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001682:	f7ff fb05 	bl	8000c90 <HAL_GetTick>
 8001686:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_RCC_DeInit+0x124>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a21      	ldr	r2, [pc, #132]	; (8001714 <HAL_RCC_DeInit+0x124>)
 800168e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001692:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fafb 	bl	8000c90 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e031      	b.n	800170c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80016ba:	f7ff fae9 	bl	8000c90 <HAL_GetTick>
 80016be:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a13      	ldr	r2, [pc, #76]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016c6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80016ca:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fadf 	bl	8000c90 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e015      	b.n	800170c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_RCC_DeInit+0x124>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_RCC_DeInit+0x124>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	20000020 	.word	0x20000020
 800171c:	007a1200 	.word	0x007a1200
 8001720:	20000024 	.word	0x20000024

08001724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e272      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8087 	beq.w	8001852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001744:	4b92      	ldr	r3, [pc, #584]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b04      	cmp	r3, #4
 800174e:	d00c      	beq.n	800176a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001750:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d112      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
 800175c:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001768:	d10b      	bne.n	8001782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d06c      	beq.n	8001850 <HAL_RCC_OscConfig+0x12c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d168      	bne.n	8001850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e24c      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x76>
 800178c:	4b80      	ldr	r3, [pc, #512]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7f      	ldr	r2, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	e02e      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x98>
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0xbc>
 80017c6:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a71      	ldr	r2, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b6f      	ldr	r3, [pc, #444]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a6e      	ldr	r2, [pc, #440]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xd4>
 80017e0:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a6a      	ldr	r2, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fa46 	bl	8000c90 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fa42 	bl	8000c90 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e200      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xe4>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fa32 	bl	8000c90 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001830:	f7ff fa2e 	bl	8000c90 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1ec      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x10c>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800185e:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186a:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
 8001876:	4b46      	ldr	r3, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1c0      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4939      	ldr	r1, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b36      	ldr	r3, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff f9e7 	bl	8000c90 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c6:	f7ff f9e3 	bl	8000c90 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1a1      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_RCC_OscConfig+0x270>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff f9c6 	bl	8000c90 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff f9c2 	bl	8000c90 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e180      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03a      	beq.n	80019a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d019      	beq.n	800196e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff f9a6 	bl	8000c90 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff f9a2 	bl	8000c90 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e160      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <HAL_RCC_OscConfig+0x26c>)
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 face 	bl	8001f08 <RCC_Delay>
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_RCC_OscConfig+0x274>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff f98c 	bl	8000c90 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197a:	e00f      	b.n	800199c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff f988 	bl	8000c90 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d908      	bls.n	800199c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e146      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	42420000 	.word	0x42420000
 8001998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	4b92      	ldr	r3, [pc, #584]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e9      	bne.n	800197c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a6 	beq.w	8001b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b8b      	ldr	r3, [pc, #556]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10d      	bne.n	80019e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b88      	ldr	r3, [pc, #544]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	4a87      	ldr	r2, [pc, #540]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	61d3      	str	r3, [r2, #28]
 80019d2:	4b85      	ldr	r3, [pc, #532]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d118      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a7e      	ldr	r2, [pc, #504]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f949 	bl	8000c90 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a02:	f7ff f945 	bl	8000c90 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b64      	cmp	r3, #100	; 0x64
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e103      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	4b75      	ldr	r3, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x4c8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x312>
 8001a28:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6213      	str	r3, [r2, #32]
 8001a34:	e02d      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x334>
 8001a3e:	4b6a      	ldr	r3, [pc, #424]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4a69      	ldr	r2, [pc, #420]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	4b67      	ldr	r3, [pc, #412]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	4a66      	ldr	r2, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	f023 0304 	bic.w	r3, r3, #4
 8001a54:	6213      	str	r3, [r2, #32]
 8001a56:	e01c      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d10c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x356>
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4a60      	ldr	r2, [pc, #384]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6213      	str	r3, [r2, #32]
 8001a6c:	4b5e      	ldr	r3, [pc, #376]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	4a5d      	ldr	r2, [pc, #372]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6213      	str	r3, [r2, #32]
 8001a78:	e00b      	b.n	8001a92 <HAL_RCC_OscConfig+0x36e>
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a5a      	ldr	r2, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d015      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f8f9 	bl	8000c90 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7ff f8f5 	bl	8000c90 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0b1      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ee      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x37e>
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f8e3 	bl	8000c90 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f8df 	bl	8000c90 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e09b      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	4b40      	ldr	r3, [pc, #256]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ee      	bne.n	8001ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001af0:	7dfb      	ldrb	r3, [r7, #23]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af6:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	4a3b      	ldr	r2, [pc, #236]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8087 	beq.w	8001c1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d061      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d146      	bne.n	8001bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f8b3 	bl	8000c90 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff f8af 	bl	8000c90 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e06d      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d108      	bne.n	8001b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4921      	ldr	r1, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a19      	ldr	r1, [r3, #32]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	491b      	ldr	r1, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f883 	bl	8000c90 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f87f 	bl	8000c90 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e03d      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x46a>
 8001bac:	e035      	b.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_RCC_OscConfig+0x4cc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f86c 	bl	8000c90 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff f868 	bl	8000c90 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e026      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x498>
 8001bda:	e01e      	b.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e019      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x500>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0d0      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b67      	ldr	r3, [pc, #412]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4965      	ldr	r1, [pc, #404]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0b8      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d020      	beq.n	8001cba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a58      	ldr	r2, [pc, #352]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ca6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	494d      	ldr	r1, [pc, #308]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d040      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d115      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e07f      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e073      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06b      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4936      	ldr	r1, [pc, #216]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d18:	f7fe ffba 	bl	8000c90 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7fe ffb6 	bl	8000c90 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e053      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d210      	bcs.n	8001d78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4922      	ldr	r1, [pc, #136]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e032      	b.n	8001dde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4916      	ldr	r1, [pc, #88]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d009      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	490e      	ldr	r1, [pc, #56]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001db6:	f000 f821 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	490a      	ldr	r1, [pc, #40]	; (8001df0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	5ccb      	ldrb	r3, [r1, r3]
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <HAL_RCC_ClockConfig+0x1cc>)
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1d0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ff18 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08002480 	.word	0x08002480
 8001df4:	20000020 	.word	0x20000020
 8001df8:	20000024 	.word	0x20000024

08001dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e16:	4b1e      	ldr	r3, [pc, #120]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x30>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d003      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x36>
 8001e2a:	e027      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2e:	613b      	str	r3, [r7, #16]
      break;
 8001e30:	e027      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	0c9b      	lsrs	r3, r3, #18
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d010      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0c5b      	lsrs	r3, r3, #17
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e5e:	fb03 f202 	mul.w	r2, r3, r2
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e004      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	613b      	str	r3, [r7, #16]
      break;
 8001e7a:	e002      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e7e:	613b      	str	r3, [r7, #16]
      break;
 8001e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e82:	693b      	ldr	r3, [r7, #16]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	007a1200 	.word	0x007a1200
 8001e98:	08002498 	.word	0x08002498
 8001e9c:	080024a8 	.word	0x080024a8
 8001ea0:	003d0900 	.word	0x003d0900

08001ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000020 	.word	0x20000020

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ebc:	f7ff fff2 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	08002490 	.word	0x08002490

08001ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee4:	f7ff ffde 	bl	8001ea4 <HAL_RCC_GetHCLKFreq>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	0adb      	lsrs	r3, r3, #11
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08002490 	.word	0x08002490

08001f08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <RCC_Delay+0x34>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <RCC_Delay+0x38>)
 8001f16:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1a:	0a5b      	lsrs	r3, r3, #9
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f24:	bf00      	nop
  }
  while (Delay --);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1e5a      	subs	r2, r3, #1
 8001f2a:	60fa      	str	r2, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f9      	bne.n	8001f24 <RCC_Delay+0x1c>
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	20000020 	.word	0x20000020
 8001f40:	10624dd3 	.word	0x10624dd3

08001f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e042      	b.n	8001fdc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fd8e 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f9af 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b20      	cmp	r3, #32
 8002002:	d16d      	bne.n	80020e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <HAL_UART_Transmit+0x2c>
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e066      	b.n	80020e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2221      	movs	r2, #33	; 0x21
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002022:	f7fe fe35 	bl	8000c90 <HAL_GetTick>
 8002026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	88fa      	ldrh	r2, [r7, #6]
 8002032:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203c:	d108      	bne.n	8002050 <HAL_UART_Transmit+0x6c>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d104      	bne.n	8002050 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	e003      	b.n	8002058 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002058:	e02a      	b.n	80020b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f8d2 	bl	800220e <UART_WaitOnFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e036      	b.n	80020e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10b      	bne.n	8002092 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3302      	adds	r3, #2
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	e007      	b.n	80020a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1cf      	bne.n	800205a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8a2 	bl	800220e <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08a      	sub	sp, #40	; 0x28
 80020ee:	af02      	add	r7, sp, #8
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b20      	cmp	r3, #32
 8002108:	d17c      	bne.n	8002204 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_UART_Receive+0x2c>
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e075      	b.n	8002206 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2222      	movs	r2, #34	; 0x22
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212e:	f7fe fdaf 	bl	8000c90 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88fa      	ldrh	r2, [r7, #6]
 800213e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002148:	d108      	bne.n	800215c <HAL_UART_Receive+0x72>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d104      	bne.n	800215c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	e003      	b.n	8002164 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002164:	e043      	b.n	80021ee <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f84c 	bl	800220e <UART_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e042      	b.n	8002206 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002192:	b29a      	uxth	r2, r3
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3302      	adds	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e01f      	b.n	80021e0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	d007      	beq.n	80021ba <HAL_UART_Receive+0xd0>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <HAL_UART_Receive+0xde>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e008      	b.n	80021da <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1b6      	bne.n	8002166 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b090      	sub	sp, #64	; 0x40
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	4613      	mov	r3, r2
 800221c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221e:	e050      	b.n	80022c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002226:	d04c      	beq.n	80022c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222a:	2b00      	cmp	r3, #0
 800222c:	d007      	beq.n	800223e <UART_WaitOnFlagUntilTimeout+0x30>
 800222e:	f7fe fd2f 	bl	8000c90 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800223a:	429a      	cmp	r2, r3
 800223c:	d241      	bcs.n	80022c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	330c      	adds	r3, #12
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	e853 3f00 	ldrex	r3, [r3]
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800225e:	637a      	str	r2, [r7, #52]	; 0x34
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002266:	e841 2300 	strex	r3, r2, [r1]
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800226c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1e5      	bne.n	800223e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	3314      	adds	r3, #20
 8002278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	e853 3f00 	ldrex	r3, [r3]
 8002280:	613b      	str	r3, [r7, #16]
   return(result);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	63bb      	str	r3, [r7, #56]	; 0x38
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3314      	adds	r3, #20
 8002290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002292:	623a      	str	r2, [r7, #32]
 8002294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	69f9      	ldr	r1, [r7, #28]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	e841 2300 	strex	r3, r2, [r1]
 800229e:	61bb      	str	r3, [r7, #24]
   return(result);
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e5      	bne.n	8002272 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e00f      	b.n	80022e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d09f      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3740      	adds	r7, #64	; 0x40
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002326:	f023 030c 	bic.w	r3, r3, #12
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	68b9      	ldr	r1, [r7, #8]
 8002330:	430b      	orrs	r3, r1
 8002332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <UART_SetConfig+0x114>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fdc4 	bl	8001ee0 <HAL_RCC_GetPCLK2Freq>
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	e002      	b.n	8002362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800235c:	f7ff fdac 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 8002360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <UART_SetConfig+0x118>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	0119      	lsls	r1, r3, #4
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f2f3 	udiv	r2, r2, r3
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <UART_SetConfig+0x118>)
 800239a:	fba3 0302 	umull	r0, r3, r3, r2
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	2064      	movs	r0, #100	; 0x64
 80023a2:	fb00 f303 	mul.w	r3, r0, r3
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	3332      	adds	r3, #50	; 0x32
 80023ac:	4a15      	ldr	r2, [pc, #84]	; (8002404 <UART_SetConfig+0x118>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023b8:	4419      	add	r1, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <UART_SetConfig+0x118>)
 80023d2:	fba3 0302 	umull	r0, r3, r3, r2
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2064      	movs	r0, #100	; 0x64
 80023da:	fb00 f303 	mul.w	r3, r0, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	3332      	adds	r3, #50	; 0x32
 80023e4:	4a07      	ldr	r2, [pc, #28]	; (8002404 <UART_SetConfig+0x118>)
 80023e6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 020f 	and.w	r2, r3, #15
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	440a      	add	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40013800 	.word	0x40013800
 8002404:	51eb851f 	.word	0x51eb851f

08002408 <memset>:
 8002408:	4603      	mov	r3, r0
 800240a:	4402      	add	r2, r0
 800240c:	4293      	cmp	r3, r2
 800240e:	d100      	bne.n	8002412 <memset+0xa>
 8002410:	4770      	bx	lr
 8002412:	f803 1b01 	strb.w	r1, [r3], #1
 8002416:	e7f9      	b.n	800240c <memset+0x4>

08002418 <__libc_init_array>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2600      	movs	r6, #0
 800241c:	4d0c      	ldr	r5, [pc, #48]	; (8002450 <__libc_init_array+0x38>)
 800241e:	4c0d      	ldr	r4, [pc, #52]	; (8002454 <__libc_init_array+0x3c>)
 8002420:	1b64      	subs	r4, r4, r5
 8002422:	10a4      	asrs	r4, r4, #2
 8002424:	42a6      	cmp	r6, r4
 8002426:	d109      	bne.n	800243c <__libc_init_array+0x24>
 8002428:	f000 f81a 	bl	8002460 <_init>
 800242c:	2600      	movs	r6, #0
 800242e:	4d0a      	ldr	r5, [pc, #40]	; (8002458 <__libc_init_array+0x40>)
 8002430:	4c0a      	ldr	r4, [pc, #40]	; (800245c <__libc_init_array+0x44>)
 8002432:	1b64      	subs	r4, r4, r5
 8002434:	10a4      	asrs	r4, r4, #2
 8002436:	42a6      	cmp	r6, r4
 8002438:	d105      	bne.n	8002446 <__libc_init_array+0x2e>
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002440:	4798      	blx	r3
 8002442:	3601      	adds	r6, #1
 8002444:	e7ee      	b.n	8002424 <__libc_init_array+0xc>
 8002446:	f855 3b04 	ldr.w	r3, [r5], #4
 800244a:	4798      	blx	r3
 800244c:	3601      	adds	r6, #1
 800244e:	e7f2      	b.n	8002436 <__libc_init_array+0x1e>
 8002450:	080024ac 	.word	0x080024ac
 8002454:	080024ac 	.word	0x080024ac
 8002458:	080024ac 	.word	0x080024ac
 800245c:	080024b0 	.word	0x080024b0

08002460 <_init>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	bf00      	nop
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr

0800246c <_fini>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	bf00      	nop
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr
